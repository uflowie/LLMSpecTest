@page "/gemini"
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions

<style>
    .form-group {
        margin-bottom: 1rem;
    }

    label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: bold;
    }

    input[type="text"],
    input[type="date"],
    input[type="number"] {
        width: 100%;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        color: #495057;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        box-sizing: border-box; /* Ensure padding and border don't add to width */
    }

    .error-message {
        color: red;
        font-size: 0.875em;
        margin-top: 0.25rem;
    }

    button {
        padding: 0.5rem 1rem;
        font-size: 1rem;
        border-radius: 0.25rem;
        cursor: pointer;
    }

    button:disabled {
        cursor: not-allowed;
        opacity: 0.65;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 2rem;
    }

    th, td {
        border: 1px solid #dee2e6;
        padding: 0.75rem;
        text-align: left;
    }

    th {
        background-color: #f8f9fa;
    }
</style>

<h1>Book Management</h1>

<hr />

<h2>Add New Book</h2>
<form @onsubmit="HandleSubmit" @onsubmit:preventDefault>
    <div class="form-group">
        <label for="input-title">Book Title</label>
        <input id="input-title"
               type="text"
               data-testid="input-title"
               placeholder="Enter book title"
               Value="@newBook.Title"
               @oninput="(ChangeEventArgs e) => { newBook.Title = e.Value?.ToString(); OnFieldChanged(nameof(BookEntry.Title)); }"
               @onblur="() => OnFieldChanged(nameof(BookEntry.Title))" />
        <div class="error-message" data-testid="error-title">@GetError(nameof(BookEntry.Title))</div>
    </div>

    <div class="form-group">
        <label for="input-author">Author Name</label>
        <input id="input-author"
               type="text"
               data-testid="input-author"
               placeholder="Enter author name"
               Value="@newBook.Author"
               @oninput="(ChangeEventArgs e) => { newBook.Author = e.Value?.ToString(); OnFieldChanged(nameof(BookEntry.Author)); }"
               @onblur="() => OnFieldChanged(nameof(BookEntry.Author))" />
        <div class="error-message" data-testid="error-author">@GetError(nameof(BookEntry.Author))</div>
    </div>

    <div class="form-group">
        <label for="input-isbn">ISBN Number</label>
        <input id="input-isbn"
               type="text"
               data-testid="input-isbn"
               placeholder="Enter 13-digit ISBN number"
               Value="@newBook.Isbn"
               @oninput="(ChangeEventArgs e) => { newBook.Isbn = e.Value?.ToString(); OnFieldChanged(nameof(BookEntry.Isbn)); }"
               @onblur="() => OnFieldChanged(nameof(BookEntry.Isbn))" />
        <div class="error-message" data-testid="error-isbn">@GetError(nameof(BookEntry.Isbn))</div>
    </div>

    <div class="form-group">
        <label for="input-publication-date">Publication Date</label>
        <input id="input-publication-date"
               type="date"
               data-testid="input-publication-date"
               Value="@(newBook.PublicationDate?.ToString("yyyy-MM-dd"))"
               @onchange="(ChangeEventArgs e) => { if (DateTime.TryParse(e.Value?.ToString(), out var dt)) newBook.PublicationDate = dt; else newBook.PublicationDate = null; OnFieldChanged(nameof(BookEntry.PublicationDate)); }"
               @onblur="() => OnFieldChanged(nameof(BookEntry.PublicationDate))" />
        <div class="error-message" data-testid="error-publication-date">@GetError(nameof(BookEntry.PublicationDate))</div>
    </div>

    <div class="form-group">
        <label for="input-pages">Number of Pages</label>
        <input id="input-pages"
               type="number"
               data-testid="input-pages"
               placeholder="Enter number of pages"
               Value="@newBook.NumberOfPages?.ToString()"
               @oninput="(ChangeEventArgs e) => { if (int.TryParse(e.Value?.ToString(), out var val)) newBook.NumberOfPages = val; else newBook.NumberOfPages = null; OnFieldChanged(nameof(BookEntry.NumberOfPages)); }"
               @onblur="() => OnFieldChanged(nameof(BookEntry.NumberOfPages))" />
        <div class="error-message" data-testid="error-pages">@GetError(nameof(BookEntry.NumberOfPages))</div>
    </div>

    <button type="submit" data-testid="btn-submit-book" disabled="@isSubmitButtonDisabled">Add Book</button>
    <div class="error-message" data-testid="error-form">@GetError("form")</div>
</form>

<hr />

<h2>Book List</h2>
<div data-testid="data-grid-books">
    @if (!books.Any())
    {
        <p>No books available. Add a book using the form above.</p>
    }
    else
    {
        <table>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Title</th>
                    <th>Author</th>
                    <th>ISBN</th>
                    <th>Publication Date</th>
                    <th>Pages</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var book in books)
                {
                    <tr @key="book.Id" data-testid="data-grid-row-@book.Id">
                        <td data-testid="data-grid-cell-id-@book.Id">@book.Id</td>
                        <td data-testid="data-grid-cell-title-@book.Id">@book.Title</td>
                        <td data-testid="data-grid-cell-author-@book.Id">@book.Author</td>
                        <td data-testid="data-grid-cell-isbn-@book.Id">@book.Isbn</td>
                        <td data-testid="data-grid-cell-publication-date-@book.Id">@book.PublicationDate</td>
                        <td data-testid="data-grid-cell-pages-@book.Id">@book.NumberOfPages</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private BookEntry newBook = new BookEntry();
    private List<BookDisplay> books = new List<BookDisplay>();
    private Dictionary<string, string> validationErrors = new Dictionary<string, string>();
    private bool isSubmitButtonDisabled = true;

    public class BookEntry
    {
        public string? Title { get; set; }
        public string? Author { get; set; }
        public string? Isbn { get; set; }
        public DateTime? PublicationDate { get; set; } = DateTime.Today;
        public int? NumberOfPages { get; set; }
    }

    public class BookDisplay
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string Author { get; set; } = "";
        public string Isbn { get; set; } = "";
        public string PublicationDate { get; set; } = ""; // Expecting YYYY-MM-DD from API
        public int NumberOfPages { get; set; }
    }

    public class BookSubmission
    {
        public string Title { get; set; } = "";
        public string Author { get; set; } = "";
        public string Isbn { get; set; } = "";
        public string PublicationDate { get; set; } = ""; // YYYY-MM-DD
        public int NumberOfPages { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        InitializeNewBookForm();
        await LoadBooks();
        UpdateSubmitButtonState(); // Initial check for submit button state
    }

    private void InitializeNewBookForm()
    {
        newBook = new BookEntry { PublicationDate = DateTime.Today };
        validationErrors.Clear();
        // Clear form-level error if any
        validationErrors.Remove("form");
        UpdateSubmitButtonState();
    }

    private async Task LoadBooks()
    {
        try
        {
            var fetchedBooks = await Http.GetFromJsonAsync<List<BookDisplay>>("/books");
            if (fetchedBooks != null)
            {
                books = fetchedBooks; // API returns newest first as per spec
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading books: {ex.Message}");
            validationErrors["form"] = "Could not load books from the server.";
            // books list remains empty or as it was
        }
    }

    private void OnFieldChanged(string fieldName)
    {
        ValidateSingleField(fieldName);
        UpdateSubmitButtonState();
    }

    private void ValidateSingleField(string fieldName)
    {
        validationErrors.Remove(fieldName); // Clear previous error for this field
        string? errorMessage = null;

        switch (fieldName)
        {
            case nameof(BookEntry.Title):
                if (string.IsNullOrWhiteSpace(newBook.Title) || newBook.Title.Length < 2 || newBook.Title.Length > 100)
                    errorMessage = "Title must be between 2 and 100 characters.";
                break;
            case nameof(BookEntry.Author):
                if (string.IsNullOrWhiteSpace(newBook.Author) || newBook.Author.Length < 2 || newBook.Author.Length > 60)
                    errorMessage = "Author name must be between 2 and 60 characters.";
                break;
            case nameof(BookEntry.Isbn):
                if (string.IsNullOrWhiteSpace(newBook.Isbn) || !Regex.IsMatch(newBook.Isbn, @"^\d{13}$"))
                    errorMessage = "ISBN must contain exactly 13 numeric digits.";
                break;
            case nameof(BookEntry.PublicationDate):
                if (newBook.PublicationDate == null)
                    errorMessage = "Publication Date is required.";
                else if (newBook.PublicationDate.Value.Date > DateTime.Today.Date)
                    errorMessage = "Publication Date cannot be in the future.";
                break;
            case nameof(BookEntry.NumberOfPages):
                if (newBook.NumberOfPages == null || newBook.NumberOfPages < 1 || newBook.NumberOfPages > 5000)
                    errorMessage = "Number of pages must be between 1 and 5000.";
                break;
        }

        if (errorMessage != null)
        {
            validationErrors[fieldName] = errorMessage;
        }
    }

    private void UpdateSubmitButtonState()
    {
        bool titleIsValid = !(string.IsNullOrWhiteSpace(newBook.Title) || newBook.Title.Length < 2 || newBook.Title.Length > 100);
        bool authorIsValid = !(string.IsNullOrWhiteSpace(newBook.Author) || newBook.Author.Length < 2 || newBook.Author.Length > 60);
        bool isbnIsValid = !(string.IsNullOrWhiteSpace(newBook.Isbn) || !Regex.IsMatch(newBook.Isbn, @"^\d{13}$"));
        bool pubDateIsValid = !(newBook.PublicationDate == null || newBook.PublicationDate.Value.Date > DateTime.Today.Date);
        bool pagesIsValid = !(newBook.NumberOfPages == null || newBook.NumberOfPages < 1 || newBook.NumberOfPages > 5000);

        isSubmitButtonDisabled = !(titleIsValid && authorIsValid && isbnIsValid && pubDateIsValid && pagesIsValid);
    }

    private async Task HandleSubmit()
    {
        // Ensure all fields are validated and error messages are current
        ValidateSingleField(nameof(BookEntry.Title));
        ValidateSingleField(nameof(BookEntry.Author));
        ValidateSingleField(nameof(BookEntry.Isbn));
        ValidateSingleField(nameof(BookEntry.PublicationDate));
        ValidateSingleField(nameof(BookEntry.NumberOfPages));
        UpdateSubmitButtonState(); // Recalculate submit button state based on all current values

        if (isSubmitButtonDisabled)
        {
            return; // Prevent submission if form is invalid
        }

        var bookToPost = new BookSubmission
        {
            Title = newBook.Title!,
            Author = newBook.Author!,
            Isbn = newBook.Isbn!,
            PublicationDate = newBook.PublicationDate!.Value.ToString("yyyy-MM-dd"),
            NumberOfPages = newBook.NumberOfPages!.Value
        };

        try
        {
            var response = await Http.PostAsJsonAsync("/books", bookToPost);
            if (response.IsSuccessStatusCode)
            {
                BookDisplay? createdBook = await response.Content.ReadFromJsonAsync<BookDisplay>();
                if (createdBook != null)
                {
                    books.Insert(0, createdBook); // Add to top of the list
                }
                InitializeNewBookForm(); // Clear form, validation errors, and update button state
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error creating book: {response.StatusCode}, {errorContent}");
                validationErrors["form"] = $"Failed to submit book. Server responded with: {response.StatusCode}.";
                UpdateSubmitButtonState(); // Keep submit possibly disabled due to form error
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception creating book: {ex.Message}");
            validationErrors["form"] = "An unexpected error occurred while submitting the book. Please try again.";
            UpdateSubmitButtonState(); // Keep submit possibly disabled
        }
    }

    private string? GetError(string fieldName) => validationErrors.TryGetValue(fieldName, out var error) ? error : null;
}