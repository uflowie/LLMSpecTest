@* --------------------------------------------------------------------
   BookManagement.razor
   A self-contained Blazor component implementing the book-entry form
   and data grid exactly as specified (no third-party libraries).
   ------------------------------------------------------------------ *@
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http

@page "/o3"

<EditForm EditContext="@editContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div>
        <label for="title">Book Title</label>
        <InputText id="title"
                   data-testid="input-title"
                   placeholder="Enter book title"
                   @bind-Value="bookInput.Title"
                   @bind-Value:event="oninput" />
        <span data-testid="error-title">
            <ValidationMessage For="@(() => bookInput.Title)" />
        </span>
    </div>

    <div>
        <label for="author">Author Name</label>
        <InputText id="author"
                   data-testid="input-author"
                   placeholder="Enter author name"
                   @bind-Value="bookInput.Author"
                   @bind-Value:event="oninput" />
        <span data-testid="error-author">
            <ValidationMessage For="@(() => bookInput.Author)" />
        </span>
    </div>

    <div>
        <label for="isbn">ISBN Number</label>
        <InputText id="isbn"
                   data-testid="input-isbn"
                   placeholder="Enter 13-digit ISBN number"
                   @bind-Value="bookInput.Isbn"
                   @bind-Value:event="oninput" />
        <span data-testid="error-isbn">
            <ValidationMessage For="@(() => bookInput.Isbn)" />
        </span>
    </div>

    <div>
        <label for="publication-date">Publication Date</label>
        <InputDate id="publication-date"
                   data-testid="input-publication-date"
                   @bind-Value="bookInput.PublicationDate"
                   @bind-Value:event="oninput" />
        <span data-testid="error-publication-date">
            <ValidationMessage For="@(() => bookInput.PublicationDate)" />
        </span>
    </div>

    <div>
        <label for="pages">Number of Pages</label>
        <InputNumber id="pages"
                     data-testid="input-pages"
                     placeholder="Enter number of pages"
                     @bind-Value="bookInput.NumberOfPages"
                     @bind-Value:event="oninput" />
        <span data-testid="error-pages">
            <ValidationMessage For="@(() => bookInput.NumberOfPages)" />
        </span>
    </div>

    <button type="submit"
            data-testid="btn-submit-book"
            disabled="@(!isFormValid)">
        Add Book
    </button>
</EditForm>

<hr />

<table data-testid="data-grid-books">
    <thead>
        <tr>
            <th>ID</th>
            <th>Title</th>
            <th>Author</th>
            <th>ISBN</th>
            <th>Publication Date</th>
            <th>Pages</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var b in books)
        {
            <tr data-testid="data-grid-row-@b.Id">
                <td data-testid="data-grid-cell-id-@b.Id">@b.Id</td>
                <td data-testid="data-grid-cell-title-@b.Id">@b.Title</td>
                <td data-testid="data-grid-cell-author-@b.Id">@b.Author</td>
                <td data-testid="data-grid-cell-isbn-@b.Id">@b.Isbn</td>
                <td data-testid="data-grid-cell-publication-date-@b.Id">@b.PublicationDate.ToString("yyyy-MM-dd")</td>
                <td data-testid="data-grid-cell-pages-@b.Id">@b.NumberOfPages</td>
            </tr>
        }
    </tbody>
</table>

@code {
    // ------------ Data-transfer and validation models ----------------
    private class BookInput
    {
        [Required(ErrorMessage = "Title must be between 2 and 100 characters.")]
        [StringLength(100, MinimumLength = 2,
            ErrorMessage = "Title must be between 2 and 100 characters.")]
        public string? Title { get; set; }

        [Required(ErrorMessage = "Author name must be between 2 and 60 characters.")]
        [StringLength(60, MinimumLength = 2,
            ErrorMessage = "Author name must be between 2 and 60 characters.")]
        public string? Author { get; set; }

        [Required(ErrorMessage = "ISBN must contain exactly 13 numeric digits.")]
        [RegularExpression(@"^\d{13}$",
            ErrorMessage = "ISBN must contain exactly 13 numeric digits.")]
        public string? Isbn { get; set; }

        [Required(ErrorMessage = "Publication Date cannot be in the future.")]
        [NotFutureDate(ErrorMessage = "Publication Date cannot be in the future.")]
        public DateTime PublicationDate { get; set; } = DateTime.Today;

        [Required(ErrorMessage = "Number of pages must be between 1 and 5000.")]
        [Range(1, 5000,
            ErrorMessage = "Number of pages must be between 1 and 5000.")]
        public int? NumberOfPages { get; set; }
    }

    private class Book : BookInput
    {
        public int Id { get; set; }
    }

    /// <summary>
    /// Ensures the date is not in the future (relative to the server/client clock).
    /// </summary>
    private sealed class NotFutureDateAttribute : ValidationAttribute
    {
        public override bool IsValid(object? value)
        {
            if (value is DateTime dt)
            {
                return dt.Date <= DateTime.Today;
            }
            return true;
        }
    }

    // -------------------- Component state ----------------------------
    private BookInput bookInput = new();
    private EditContext editContext = default!;
    private bool isFormValid;

    private readonly List<Book> books = new();

    // ------------------- Lifecycle methods ---------------------------
    protected override async Task OnInitializedAsync()
    {
        ResetEditContext();
        await LoadBooksAsync();
    }

    // ------------------- Event handlers ------------------------------
    private async Task HandleValidSubmit()
    {
        // Serialize & POST the valid book
        var response = await Http.PostAsJsonAsync("/books", bookInput);
        if (response.IsSuccessStatusCode)
        {
            var created = await response.Content.ReadFromJsonAsync<Book>();
            if (created is not null)
            {
                books.Insert(0, created); // newest on top
            }
            // Clear form and reset validation
            bookInput = new BookInput(); // PublicationDate defaults to Today
            ResetEditContext();
        }
        else
        {
            // TODO: add real error handling / toast etc.
        }
    }

    // --------------- Helper / infrastructure methods -----------------
    private void ResetEditContext()
    {
        editContext = new EditContext(bookInput);
        editContext.OnFieldChanged += (_, __) => RecalculateButtonState();
        editContext.OnValidationStateChanged += (_, __) => RecalculateButtonState();
        RecalculateButtonState();
        StateHasChanged();
    }

    private void RecalculateButtonState()
    {
        isFormValid = editContext.Validate(); // performs full validation
        StateHasChanged();
    }

    private async Task LoadBooksAsync()
    {
        try
        {
            var fetched = await Http.GetFromJsonAsync<List<Book>>("/books");
            if (fetched is not null)
            {
                books.Clear();
                books.AddRange(fetched); // API returns newest first
            }
        }
        catch
        {
            // TODO: add real error handling
        }
    }
}
