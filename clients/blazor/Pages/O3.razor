@page "/o3"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json.Serialization
@inject HttpClient Http

<h2>Book Management</h2>

<EditForm EditContext="_editContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div>
        <label for="title">Book Title</label>
        <InputText id="title"
                   data-testid="input-title"
                   class="form-control"
                   @bind-Value="_model.Title"
                   @bind-Value:event="oninput"
                   placeholder="Enter book title" />
        <span class="validation-message" data-testid="error-title">
            @_editContext?.GetValidationMessages(() => _model.Title).FirstOrDefault()
        </span>
    </div>

    <div>
        <label for="author">Author Name</label>
        <InputText id="author"
                   data-testid="input-author"
                   class="form-control"
                   @bind-Value="_model.Author"
                   @bind-Value:event="oninput"
                   placeholder="Enter author name" />
        <span class="validation-message" data-testid="error-author">
            @_editContext?.GetValidationMessages(() => _model.Author).FirstOrDefault()
        </span>
    </div>

    <div>
        <label for="isbn">ISBN Number</label>
        <InputText id="isbn"
                   data-testid="input-isbn"
                   class="form-control"
                   @bind-Value="_model.Isbn"
                   @bind-Value:event="oninput"
                   placeholder="Enter 13-digit ISBN number" />
        <span class="validation-message" data-testid="error-isbn">
            @_editContext?.GetValidationMessages(() => _model.Isbn).FirstOrDefault()
        </span>
    </div>

    <div>
        <label for="publication-date">Publication Date</label>
        <InputDate id="publication-date"
                   data-testid="input-publication-date"
                   class="form-control"
                   @bind-Value="_model.PublicationDate"
                   @bind-Value:event="oninput" />
        <span class="validation-message" data-testid="error-publication-date">
            @_editContext?.GetValidationMessages(() => _model.PublicationDate).FirstOrDefault()
        </span>
    </div>

    <div>
        <label for="pages">Number of Pages</label>
        <InputNumber id="pages"
                     data-testid="input-pages"
                     class="form-control"
                     @bind-Value="_model.NumberOfPages"
                     @bind-Value:event="oninput"
                     placeholder="Enter number of pages" />
        <span class="validation-message" data-testid="error-pages">
            @_editContext?.GetValidationMessages(() => _model.NumberOfPages).FirstOrDefault()
        </span>
    </div>

    <button type="submit" data-testid="btn-submit-book" disabled="@(!_isValid)">Add Book</button>
</EditForm>

<table data-testid="data-grid-books">
    <thead>
        <tr>
            <th>ID</th>
            <th>Title</th>
            <th>Author</th>
            <th>ISBN</th>
            <th>Publication Date</th>
            <th>Pages</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var b in _books)
        {
            <tr data-testid="data-grid-row-@b.Id">
                <td data-testid="data-grid-cell-id-@b.Id">@b.Id</td>
                <td data-testid="data-grid-cell-title-@b.Id">@b.Title</td>
                <td data-testid="data-grid-cell-author-@b.Id">@b.Author</td>
                <td data-testid="data-grid-cell-isbn-@b.Id">@b.Isbn</td>
                <td data-testid="data-grid-cell-publication-date-@b.Id">@b.PublicationDate.ToString("yyyy-MM-dd")</td>
                <td data-testid="data-grid-cell-pages-@b.Id">@b.NumberOfPages</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private BookInput _model = new() { PublicationDate = DateTime.Today };
    private EditContext _editContext;
    private readonly List<Book> _books = new();
    private bool _isValid;

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(_model);
        _editContext.OnFieldChanged += (_, __) => ValidateForm();
        ValidateForm();

        var fromServer = await Http.GetFromJsonAsync<List<Book>>("/books");
        if (fromServer != null)
        {
            _books.AddRange(fromServer);
        }
    }

    private void ValidateForm()
    {
        _editContext.Validate();
        _isValid = !_editContext.GetValidationMessages().Any();
        InvokeAsync(StateHasChanged);
    }

    private async Task HandleValidSubmit()
    {
        var response = await Http.PostAsJsonAsync("/books", _model);
        if (response.IsSuccessStatusCode)
        {
            var created = await response.Content.ReadFromJsonAsync<Book>();
            if (created != null)
            {
                _books.Insert(0, created);
            }

            _model = new BookInput { PublicationDate = DateTime.Today };
            _editContext = new EditContext(_model);
            _editContext.OnFieldChanged += (_, __) => ValidateForm();
            ValidateForm();
        }
    }

    public class BookInput : IValidatableObject
    {
        [Required(ErrorMessage = "Title must be between 2 and 100 characters.")]
        [StringLength(100, MinimumLength = 2, ErrorMessage = "Title must be between 2 and 100 characters.")]
        [JsonPropertyName("title")]
        public string Title { get; set; } = string.Empty;

        [Required(ErrorMessage = "Author name must be between 2 and 60 characters.")]
        [StringLength(60, MinimumLength = 2, ErrorMessage = "Author name must be between 2 and 60 characters.")]
        [JsonPropertyName("author")]
        public string Author { get; set; } = string.Empty;

        [Required(ErrorMessage = "ISBN must contain exactly 13 numeric digits.")]
        [RegularExpression("^[0-9]{13}$", ErrorMessage = "ISBN must contain exactly 13 numeric digits.")]
        [JsonPropertyName("isbn")]
        public string Isbn { get; set; } = string.Empty;

        [Required(ErrorMessage = "Publication Date cannot be in the future.")]
        [JsonPropertyName("publication_date")]
        public DateTime PublicationDate { get; set; }

        [Required(ErrorMessage = "Number of pages must be between 1 and 5000.")]
        [Range(1, 5000, ErrorMessage = "Number of pages must be between 1 and 5000.")]
        [JsonPropertyName("number_of_pages")]
        public int? NumberOfPages { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (PublicationDate > DateTime.Today)
            {
                yield return new ValidationResult("Publication Date cannot be in the future.", new[] { nameof(PublicationDate) });
            }
        }
    }

    public class Book
    {
        [JsonPropertyName("id")]
        public int Id { get; set; }

        [JsonPropertyName("title")]
        public string Title { get; set; }

        [JsonPropertyName("author")]
        public string Author { get; set; }

        [JsonPropertyName("isbn")]
        public string Isbn { get; set; }

        [JsonPropertyName("publication_date")]
        public DateTime PublicationDate { get; set; }

        [JsonPropertyName("number_of_pages")]
        public int NumberOfPages { get; set; }
    }
}
